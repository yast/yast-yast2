/****************************************************************************

Copyright (c) 2002 - 2012 Novell, Inc.
All Rights Reserved.

This program is free software; you can redistribute it and/or
modify it under the terms of version 2 of the GNU General Public License as
published by the Free Software Foundation.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.   See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, contact Novell, Inc.

To contact Novell about this file by physical or electronic mail,
you may find current contact information at www.novell.com

****************************************************************************/
/**
 * File:	modules/Systemd.ycp
 * Package:	yast2
 * Summary:	systemd configuration
 * Authors:	Ladislav Slez√°k <lslezak@suse.cz>
 *
 * $Id$
 *
 * Functions for setting systemd options
 */

{

module "Systemd";

import "FileUtils";

const string systemd_path = "/bin/systemd";
const string default_target_symlink = "/etc/systemd/system/default.target";
const string systemd_targets_dir = "/usr/lib/systemd/system";
const string systemd_mountdir = "/sys/fs/cgroup/systemd";

textdomain "base";

/**
 * Check whether the systemd package is installed
 */
global boolean Installed()
{
    // check for systemd executable
    return SCR::Read(.target.size, systemd_path) >= 0;
}

/*
 * Check whether systemd init is currently running
 * @return boolean true if systemd init is running
 */
global boolean Running()
{
    return FileUtils::IsDirectory (systemd_mountdir) == true;
}

/**
 * Set default runlevel for systemd (assumes systemd is installed)
 * @param runlevel the default runlevel to set (integer in range 0..6)
 * @return boolean true on success
 */
global boolean SetDefaultRunlevel(integer selected_runlevel)
{
    if (selected_runlevel == nil || selected_runlevel < 0 || selected_runlevel > 6)
    {
	y2error("Invalid default runlevel (must be in range 0..6): %1", selected_runlevel);
	return false;
    }

    y2milestone("Setting systemd default runlevel: %1", selected_runlevel);

    // create symbolic link, -f to rewrite the current link (if exists)
    string command = sformat("/bin/ln -s -f %1/runlevel%2.target %3",
	systemd_targets_dir, selected_runlevel, default_target_symlink);
    y2milestone("Executing: %1", command);

    integer res = (integer)SCR::Execute(.target.bash, command);
    y2debug("Result: %1", res);

    boolean ret = (res == 0);
    y2milestone("Default runlevel set: %1", ret);

    return ret;
}

/**
 * Get the default runlevel for systemd
 * @return integer the default runlevel (or nil on error or unknown runlevel)
 */
global integer DefaultRunlevel()
{
    string target = (string)SCR::Read(.target.symlink, default_target_symlink);
    y2milestone("Default symlink points to: %1", target);

    if (target == nil)
    {
	y2error("Cannot read symlink target of %1", default_target_symlink);
	return nil;
    }

    // check runlevel<number>.target
    string runlevel = regexpsub(target, "/runlevel([0-6]).target$", "\\1");
    if (runlevel != nil)
    {
	integer ret = tointeger(runlevel);
	y2milestone("Default runlevel: %1", ret);

	return ret;
    }

    // check runlevel specified by a symbolic name
    // (this is written in systemd documentation how to change the default,
    // YaST should also support this style in case users do a manual change)
    string runlevel_name = regexpsub(target, "/([^/]*).target$", "\\1");
    if (runlevel_name != nil)
    {
	y2milestone("Detected default runlevel name: %1", runlevel_name);
	map<string, integer> mapping = $[
	    "poweroff"	: 0,
	    "rescue"	: 1,
	    // this is ambiguous, runlevels 2 and 4 also point to multi-user
	    // assume runlevel 3 in this case (the most probable)
	    "multi-user": 3,
	    "graphical" : 5,
	    "reboot"	: 6
	];

	integer ret = mapping[runlevel_name]:nil;
	y2milestone("Default runlevel: %1", ret);

	return ret;
    }

    y2error("Cannot determine the default runlevel");
    return nil;
}

} /* EOF */

