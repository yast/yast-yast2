/****************************************************************************

Copyright (c) 2002 - 2012 Novell, Inc.
All Rights Reserved.

This program is free software; you can redistribute it and/or
modify it under the terms of version 2 of the GNU General Public License as
published by the Free Software Foundation.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.   See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, contact Novell, Inc.

To contact Novell about this file by physical or electronic mail,
you may find current contact information at www.novell.com

****************************************************************************/
/**
 * File:	modules/TypeRepository.ycp
 * Package:	yast2
 * Summary:	Type repository for validation of user-defined types
 * Authors:	Stanislav Visnovsky <visnov@suse.cz>
 * Flags:	Stable
 *
 * $Id$
 */

{

module "TypeRepository";

import "Address";
import "Hostname";
import "IP";
import "Netmask";
import "URL";

/* Map of known types, empty initially */
map<string, boolean(any)> types = $[];

/**
 * Validate, that the given value is of given type.
 *
 * @param value	value to be validated
 * @param type type against which to validate
 * @return true, if the value can be considered to be of a given type
 */
global define boolean is_a(any value, string type) ``{
    boolean(any) validator = types[type]:nil;
    if ( validator != nil )	{
	return validator(value);
    } else {
	y2error( "Request to validate unknown type %1", type  );
    }
    return false;
}

/**
 * Check, if s is a string.
 *
 * @param s		a value to be validated
 * @return		true if s is string
 */
define boolean is_string( any s ) ``{
    return is( s, string );
}

/**
 * Constructor, defines the known types.
 */
global define void TypeRepository() ``{
    types = $[
	"ip"		: IP::Check,
	"ip4"		: IP::Check4,
	"ip6"		: IP::Check6,
	"netmask"	: Netmask::Check,
	"netmask4"	: Netmask::Check4,
	"netmask6"	: Netmask::Check6,
	"host"		: Address::Check,
	"host4"		: Address::Check4,
	"host6"		: Address::Check6,
	"hostname"	: Hostname::Check,
	"fullhostname"	: Hostname::CheckFQ,
	"domain"	: Hostname::CheckDomain,
	"url"		: URL::Check,
	"string"	: is_string,
    ];
}

/*
 * Checks if given argument is empty.
 *
 * For other types than string, list, map returns true when value is nil.
 * For list and map checks if value is nil or doesn't contain any item ( [] resp $[] ).
 * For string checks if value is nil or equal to string without any chars ("").
 */
global boolean IsEmpty( any value)
{
    if( value == nil)
        return true;

    boolean ret = false;

    if( is( value, string))
        ret = isempty( (string) value);

    if( is( value, list))
        ret = isempty( (list) value);

    if( is( value, map))
        ret = isempty( (map) value);

    if( is( value, term) )
        ret = size( (term) value) == 0;

    return ret;
}

/************************* generic validators *******************************/

/**
 *  Generic regular expression validator.
 *
 *  @param regex	the regular expression to be matched
 *  @param value	the value to be matched
 *  @return	true if successful
 */
global define boolean regex_validator( string regex, string value ) ``{
    return regexpmatch( value, regex );
}

/**
 *  Generic enumerated type validator.
 *
 *  @param values	a list of possible values
 *  @param value	the value to be matched
 *  @return	true if successful
 */
global define boolean enum_validator( list values, string value ) ``{
    return contains( values, value );
}

/* EOF */
}
