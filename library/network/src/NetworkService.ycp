/****************************************************************************

Copyright (c) 2002 - 2012 Novell, Inc.
All Rights Reserved.

This program is free software; you can redistribute it and/or
modify it under the terms of version 2 of the GNU General Public License as
published by the Free Software Foundation.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.   See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, contact Novell, Inc.

To contact Novell about this file by physical or electronic mail,
you may find current contact information at www.novell.com

****************************************************************************/
/**
 * File:	modules/NetworkService.ycp
 * Package:	Network configuration
 * Summary:	Init script handling, ifup vs NetworkManager
 * Authors:	Martin Vidner <mvidner@suse.cz>
 *
 * $Id$
 *
 * This module used to switch between /etc/init.d/network providing
 * LSB network.service and the NetworkManager.service (or another),
 * which installs a network.service alias link.
 *
 * The service name installing the network.sevice is visible in the
 * "Id" systemctl property:
 *
 *     # systemctl --no-pager -p Id show network.service
 *     Id=network.service
 *     # systemctl --force          enable NetworkManager.service
 *     # systemctl --no-pager -p Id show network.service
 *     Id=NetworkManager.service
 *
 * The network.service alias link obsoletes the old master switch in
 * /etc/sysconfig/network/config:NETWORKMANAGER (until openSUSE-12.2).
 */

{

module "NetworkService";

import "Service";
import "NetworkConfig";
import "Popup";
import "Mode";

textdomain "base";

global void Read ();

/**
 * if false, read needs to do work
 */
boolean initialized = false;

/**
 * current network service id name
 */
string cur_service_id_name = "";

/**
 * the new network service id name
 */
string new_service_id_name = "";

/**
 * Path to the systemctl command
 */
string systemctl = "/bin/systemctl";

/**
 * Helper to run systemctl actions
 * @return exit code
 */
integer RunSystemCtl (string service, string action) {
    string cmd = sformat ("%1 %2 %3.service", systemctl, action, service);
    map<string,any> ret = (map<string,any>) SCR::Execute (.target.bash_output, cmd, $[ "TERM" : "raw"]);
    y2debug("RunSystemCtl: Command '%1' returned '%2'", cmd, ret);
    return ret["exit"]:-1;
}

/**
 * Whether a network service change were requested
 * @return true when service change were requested
 */
global boolean Modified () {
    boolean ret = false;
    Read();
    if (new_service_id_name != cur_service_id_name) {
	ret = true;
    }
    y2debug("NetworkService::Modified(%1, %2) => %3",
	cur_service_id_name, new_service_id_name, ret);
    return ret;
}

/**
 * Whether use NetworkManager or ifup
 * @return true when the network is managed, false when
 *         the /etc/init.d/network script is in use.
 */
global boolean IsManaged () {
    Read ();
    return new_service_id_name != "network";
}

/**
 * @param m whether networkmanager will be used
 */
global void SetManaged (boolean m) {
    Read ();
    new_service_id_name = m ? "NetworkManager" : "network";
}

/**
 * Initialize module data
 */
global void Read () {
    if (!initialized)
    {
	cur_service_id_name = Service::GetServiceId("network");
	new_service_id_name = cur_service_id_name;

	boolean nm = new_service_id_name != "network";
	y2milestone ("NetworkManager: %1", nm);
    }
    initialized = true;
}

/**
 * Enables and disables the appropriate services.
 */
global void EnableDisable () {
    // Workaround for bug #61055:
    y2milestone("Enabling service %1", "network");
    string cmd = "cd /; /sbin/insserv -d /etc/init.d/network";
    SCR::Execute (.target.bash, cmd);
}

/*
 * Run /etc/init.d script with specified action
 * @param script name of the init script
 * @param action the action to use
 * @return true, when the script exits with 0
 */
boolean RunScript (string script, string action) {
    if (script == "")
	 return true;
    y2milestone("rc%1 %2", script, action);
    // Workaround for bug #61055:
    string cmd = sformat ("cd /; /etc/init.d/%1 %2", script, action);
    return SCR::Execute (.target.bash, cmd) == 0;
}

/*
 * Helper to apply a change of the network service
 */
void EnableDisableNow() {
    if (Modified()) {
	/* Stop should be called before, but when the service
	 * were not correctly started until now, stop may have
	 * no effect.
	 * So let's kill all processes in the network service
	 * cgroup to make sure e.g. dhcp clients are stopped.
	 */
	RunSystemCtl(cur_service_id_name, "kill");

	if (new_service_id_name == "network") {
	    RunSystemCtl(cur_service_id_name, "disable");
	} else {
	    RunSystemCtl(new_service_id_name, "--force enable");
	}
	cur_service_id_name = Service::GetServiceId("network");
	new_service_id_name = cur_service_id_name;
    }
}

/**
 * Reports if network service is active or not.
 * It does not report if network is connected.
 * @return true when network service is active
 */
global boolean IsActive()
{
    return RunSystemCtl ("network", "is-active") == 0;
}

/**
 * Reload or restars the network service.
 */
global void ReloadOrRestart () {
    if (IsActive()) {
	if (Modified()) {
		// reload is not sufficient
		RunSystemCtl("network", "stop");
		EnableDisableNow();
		RunSystemCtl("network", "start");
	} else {
		// reload may be unsupported
		RunSystemCtl ("network", "reload-or-try-restart");
	}
    } else {
	// always stop, it does not hurt if the net was stopped.
	RunSystemCtl("network", "stop");
	EnableDisableNow();
	RunSystemCtl("network", "start");
    }
}

/**
 * Restarts the network service
 */
global void Restart () {
	RunSystemCtl("network", "stop");
	EnableDisableNow();
	RunSystemCtl("network", "start");
}

/**
 * This is an old, confusing name for ReloadOrRestart() now
 */
global void StartStop () {
    ReloadOrRestart();
}

/*
 * Variable remembers that the question has been asked during this run already.
 * It avoids useless questions over and over again.
 */
boolean already_asked_for_NetworkManager = false;

/**
 * Opens up a continue/cancel confirmation popup
 * in the case when NetworkManager is enabled.
 * User is informed that continuing the configuration
 * may produce undefined results.
 * If NetworkManager is not used, silently returns true.
 *
 * @return boolean continue
 */
global define boolean ConfirmNetworkManager () {
    if (!already_asked_for_NetworkManager && NetworkService::IsManaged()) {
	// TRANSLATORS: pop-up question when reading the service configuration
	boolean cont = Popup::ContinueCancel(_("Your network interfaces are currently controlled by NetworkManager
but the service to configure might not work well with it.

Really continue?"));
	y2milestone("Network is controlled by NetworkManager, user decided %1...",
	    (cont ? "to continue":"not to continue")
	);
	already_asked_for_NetworkManager = true;
	
	return cont;
    } else {
	return true;
    }
}


// test for IPv4
global boolean isNetworkRunning(){
 integer net = (integer)SCR::Execute(.target.bash,
                "ip addr|grep -v '127.0.0\\|inet6'|grep -c inet");
 if (net==0) {
  y2milestone ("Network is running ...");
  return true;
 } else {
	 y2milestone("Network is not running ...");
	 return false;
        }
}
// test for IPv6
global boolean isNetworkv6Running(){
 integer net = (integer)SCR::Execute(.target.bash,
                "ip addr|grep -v 'inet6 ::1\\|inet6 fe80'|grep -c inet6");
 if (net==0) {
  y2milestone ("Network is running ...");
  return true;
 } else {
	 y2milestone("Network is not running ...");
	 return false;
        }
}

/**
 * If there is network running, return true.
 * Otherwise show error popup depending on Mode and return false
 * @return true if network running
 */
global define boolean RunningNetworkPopup()
{
y2internal("RunningNetworkPopup %1", isNetworkRunning());
 if (isNetworkRunning()) return true;
	else {
	 string error_text = sformat("%1\n%2 %3", _("No running network detected."),
Mode::installation() ?
	_("Restart installation and configure network in Linuxrc") :
	_("Configure network with YaST or Network Manager plug-in
and start this module again"),

_("or continue without network."));
	 Popup::ContinueCancel(error_text);
	 y2error("Network not runing!");
	 return false;
	}
}



/* EOF */
}
